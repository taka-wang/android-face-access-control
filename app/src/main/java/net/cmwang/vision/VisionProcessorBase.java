package net.cmwang.vision;import android.support.annotation.NonNull;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.ml.vision.common.FirebaseVisionImage;import com.google.firebase.ml.vision.common.FirebaseVisionImageMetadata;import java.util.concurrent.atomic.AtomicBoolean;public abstract class VisionProcessorBase<T> implements VisionImageProcessor {    // Whether we should ignore process(). This is usually caused by feeding input data faster than the model can handle.    private final AtomicBoolean shouldThrottle = new AtomicBoolean(false);    public VisionProcessorBase() {    }    @Override    public void process(VisionFrame frame, final GraphicOverlay graphicOverlay) {        if (shouldThrottle.get()) {            return;        }        FirebaseVisionImageMetadata metadata =                new FirebaseVisionImageMetadata.Builder()                        .setFormat(FirebaseVisionImageMetadata.IMAGE_FORMAT_NV21)                        .setWidth(frame.getWidth())                        .setHeight(frame.getHeight())                        .setRotation(frame.getRotation())                        .build();        detectInVisionImage(FirebaseVisionImage.fromByteArray(frame.getData(), metadata),                frame, graphicOverlay);    }    private void detectInVisionImage(            FirebaseVisionImage image,            final VisionFrame frame,            final GraphicOverlay graphicOverlay) {        detectInImage(image)                .addOnSuccessListener(                        new OnSuccessListener<T>() {                            @Override                            public void onSuccess(T results) {                                shouldThrottle.set(true);                                VisionProcessorBase.this.onSuccess(results, frame, graphicOverlay);                                shouldThrottle.set(false);                            }                        })                .addOnFailureListener(                        new OnFailureListener() {                            @Override                            public void onFailure(@NonNull Exception e) {                                shouldThrottle.set(false);                                VisionProcessorBase.this.onFailure(e);                            }                        });        // Begin throttling until this frame of input has been processed, either in onSuccess or onFailure.        shouldThrottle.set(true);    }    @Override    public void stop() {    }    protected abstract Task<T> detectInImage(FirebaseVisionImage image);    protected abstract void onSuccess(            @NonNull T results,            @NonNull VisionFrame frame,            @NonNull GraphicOverlay graphicOverlay);    protected abstract void onFailure(@NonNull Exception e);}